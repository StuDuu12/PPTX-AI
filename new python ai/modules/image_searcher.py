"""
Module 2: Image Search v√† Download v·ªõi Pexels API
Nhi·ªám v·ª•: T√¨m ki·∫øm v√† t·∫£i ·∫£nh ph√π h·ª£p cho m·ªói slide
"""

import requests
import os
from typing import Optional, List, Dict
from urllib.parse import urlparse
import io
from PIL import Image

class ImageSearcher:
    def __init__(self, pexels_api_key: str):
        """
        Kh·ªüi t·∫°o v·ªõi Pexels API key
        """
        self.api_key = pexels_api_key
        self.base_url = "https://api.pexels.com/v1/search"
        self.headers = {
            "Authorization": self.api_key
        }
        self.cache_dir = "image_cache"
        self._create_cache_dir()
    
    def _create_cache_dir(self):
        """
        T·∫°o th∆∞ m·ª•c cache cho ·∫£nh
        """
        if not os.path.exists(self.cache_dir):
            os.makedirs(self.cache_dir)
    
    def search_images(self, query: str, per_page: int = 5) -> Optional[List[Dict]]:
        """
        T√¨m ki·∫øm ·∫£nh tr√™n Pexels theo t·ª´ kh√≥a
        """
        try:
            params = {
                "query": query,
                "per_page": per_page,
                "orientation": "landscape",  # Ph√π h·ª£p cho slide
                "size": "medium"
            }
            
            print(f"üîç ƒêang t√¨m ·∫£nh cho: '{query}'...")
            response = requests.get(self.base_url, headers=self.headers, params=params)
            response.raise_for_status()
            
            data = response.json()
            photos = data.get("photos", [])
            
            if not photos:
                print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ·∫£nh cho '{query}'")
                return None
            
            print(f"‚úÖ T√¨m th·∫•y {len(photos)} ·∫£nh cho '{query}'")
            return photos
            
        except requests.RequestException as e:
            print(f"‚ùå L·ªói khi t√¨m ·∫£nh: {e}")
            return None
        except Exception as e:
            print(f"‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}")
            return None
    
    def download_image(self, image_url: str, filename: str) -> Optional[str]:
        """
        T·∫£i ·∫£nh t·ª´ URL v√† l∆∞u v√†o cache
        """
        try:
            print(f"‚¨áÔ∏è ƒêang t·∫£i ·∫£nh: {filename}...")
            
            response = requests.get(image_url, stream=True)
            response.raise_for_status()
            
            # T·∫°o ƒë∆∞·ªùng d·∫´n file ƒë·∫ßy ƒë·ªß
            file_path = os.path.join(self.cache_dir, filename)
            
            # L∆∞u ·∫£nh
            with open(file_path, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            # Ki·ªÉm tra v√† resize ·∫£nh n·∫øu c·∫ßn
            self._optimize_image(file_path)
            
            print(f"‚úÖ ƒê√£ t·∫£i ·∫£nh: {file_path}")
            return file_path
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t·∫£i ·∫£nh {filename}: {e}")
            return None
    
    def _optimize_image(self, file_path: str, max_width: int = 1024, max_height: int = 768):
        """
        T·ªëi ∆∞u ·∫£nh cho slide (resize v√† compress)
        """
        try:
            with Image.open(file_path) as img:
                # Chuy·ªÉn v·ªÅ RGB n·∫øu c·∫ßn
                if img.mode != 'RGB':
                    img = img.convert('RGB')
                
                # Resize n·∫øu ·∫£nh qu√° l·ªõn
                width, height = img.size
                if width > max_width or height > max_height:
                    img.thumbnail((max_width, max_height), Image.Resampling.LANCZOS)
                    img.save(file_path, 'JPEG', quality=85, optimize=True)
                    print(f"üîß ƒê√£ t·ªëi ∆∞u ·∫£nh: {file_path}")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·ªëi ∆∞u ·∫£nh {file_path}: {e}")
    
    def get_best_image_for_slide(self, keywords: str, slide_number: int) -> Optional[str]:
        """
        L·∫•y ·∫£nh t·ªët nh·∫•t cho slide d·ª±a tr√™n keywords
        """
        # T√¨m ·∫£nh
        photos = self.search_images(keywords, per_page=3)
        
        if not photos:
            # Fallback keywords
            fallback_keywords = ["presentation", "business", "technology", "abstract"]
            for fallback in fallback_keywords:
                photos = self.search_images(fallback, per_page=3)
                if photos:
                    print(f"üîÑ D√πng ·∫£nh fallback v·ªõi t·ª´ kh√≥a: {fallback}")
                    break
        
        if not photos:
            return None
        
        # Ch·ªçn ·∫£nh t·ªët nh·∫•t (·∫£nh ƒë·∫ßu ti√™n)
        best_photo = photos[0]
        image_url = best_photo['src']['medium']
        
        # T·∫°o t√™n file
        filename = f"slide_{slide_number}_{keywords.replace(' ', '_')[:20]}.jpg"
        
        # T·∫£i ·∫£nh
        return self.download_image(image_url, filename)
    
    def get_images_for_all_slides(self, slides_data: Dict) -> Dict:
        """
        T·∫£i ·∫£nh cho t·∫•t c·∫£ slides trong presentation
        """
        slides = slides_data.get("slides", [])
        image_paths = {}
        
        print(f"üñºÔ∏è B·∫Øt ƒë·∫ßu t·∫£i ·∫£nh cho {len(slides)} slides...")
        
        for i, slide in enumerate(slides):
            slide_number = slide.get("slide_number", i + 1)
            keywords = slide.get("image_keywords", "presentation")
            
            image_path = self.get_best_image_for_slide(keywords, slide_number)
            
            if image_path:
                image_paths[slide_number] = image_path
            else:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i ·∫£nh cho slide {slide_number}")
        
        print(f"‚úÖ ƒê√£ t·∫£i th√†nh c√¥ng {len(image_paths)} ·∫£nh")
        return image_paths
    
    def cleanup_cache(self):
        """
        D·ªçn d·∫πp th∆∞ m·ª•c cache
        """
        try:
            for filename in os.listdir(self.cache_dir):
                file_path = os.path.join(self.cache_dir, filename)
                os.remove(file_path)
            print("üßπ ƒê√£ d·ªçn d·∫πp cache ·∫£nh")
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói khi d·ªçn d·∫πp cache: {e}")

class FallbackImageProvider:
    """
    Provider ·∫£nh d·ª± ph√≤ng khi kh√¥ng c√≥ Pexels API
    """
    
    @staticmethod
    def create_placeholder_image(text: str, size: tuple = (1024, 768)) -> str:
        """
        T·∫°o ·∫£nh placeholder v·ªõi text
        """
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # T·∫°o ·∫£nh n·ªÅn
            img = Image.new('RGB', size, color='#f0f0f0')
            draw = ImageDraw.Draw(img)
            
            # Th·ª≠ load font, fallback v·ªÅ font m·∫∑c ƒë·ªãnh
            try:
                font = ImageFont.truetype("arial.ttf", 48)
            except:
                font = ImageFont.load_default()
            
            # V·∫Ω text v√†o gi·ªØa
            bbox = draw.textbbox((0, 0), text, font=font)
            text_width = bbox[2] - bbox[0]
            text_height = bbox[3] - bbox[1]
            
            x = (size[0] - text_width) // 2
            y = (size[1] - text_height) // 2
            
            draw.text((x, y), text, fill='#333333', font=font)
            
            # L∆∞u ·∫£nh
            filename = f"placeholder_{text.replace(' ', '_')[:15]}.png"
            file_path = os.path.join("image_cache", filename)
            
            # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a c√≥
            os.makedirs("image_cache", exist_ok=True)
            
            img.save(file_path)
            return file_path
            
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ t·∫°o placeholder image: {e}")
            return None

# Test function
def test_image_searcher():
    """
    H√†m test module
    """
    # S·ª≠ d·ª•ng API key demo - thay b·∫±ng key th·∫≠t
    api_key = "your_pexels_api_key_here"
    
    searcher = ImageSearcher(api_key)
    
    # Test search
    photos = searcher.search_images("artificial intelligence", 2)
    if photos:
        print("üéâ Search test th√†nh c√¥ng!")
        
        # Test download
        image_url = photos[0]['src']['medium']
        file_path = searcher.download_image(image_url, "test_image.jpg")
        
        if file_path:
            print("üéâ Download test th√†nh c√¥ng!")
        else:
            print("‚ùå Download test th·∫•t b·∫°i!")
    else:
        print("‚ùå Search test th·∫•t b·∫°i!")
    
    # Test fallback
    fallback = FallbackImageProvider()
    placeholder = fallback.create_placeholder_image("AI Technology")
    if placeholder:
        print("üéâ Placeholder test th√†nh c√¥ng!")

if __name__ == "__main__":
    test_image_searcher()
